package com.great.manager.action;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.great.base.action.BaseAction;
import com.great.base.entity.Message2Page2;
import com.great.manager.entity.BPerson;
import com.great.manager.service.PersonService;
import com.great.manager.service.TemperatureRecordService;
import com.great.tool.JsonCovert;
import com.great.tool.PageBean;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;
import net.sf.json.util.CycleDetectionStrategy;

/**
 * 考勤统计
 * 
 * @author LM
 *
 */
@RestController
@RequestMapping(value = "/api")
public class AttendanceRecordAction extends BaseAction {

	@Autowired
	private PersonService personService;
	@Autowired
	private TemperatureRecordService temperatureRecordService;

	@RequestMapping("/getRecord")
	public Message2Page2 getAttendanceRecord(String userName, String startTime, String endTime, String org) {
		JSONObject jsonObject = new JSONObject();
		// 按条件找出所有人
		List<BPerson> personList = personService.getPersonByOrgAndLikeName(org, userName);
		// 按条件找出所有考勤
		JSONObject attendanceList = temperatureRecordService.getRecordByTimeLikeName(userName, startTime, endTime, org);
		jsonObject.put("personList", personList);
		jsonObject.put("attendanceList", attendanceList);
		return new Message2Page2(true, 200, "", JsonCovert.filterNull(jsonObject));
	}

	@RequestMapping("/getRecordToTable")
	public JSONObject getAttendanceRecordToTable(String userName, String startTime, String endTime, String org) {
		if (startTime == null || "".equals(startTime)) {
			return JSONObject.fromObject(new PageBean());
		}
		SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
		// 按条件找出所有人
		List<BPerson> personList = personService.getPersonByOrgAndLikeName(org, userName);
		// 按条件找出所有考勤
		JSONObject attendanceList = temperatureRecordService.getRecordByTimeLikeName(userName, startTime, endTime, org);

		List<JSONObject> list = new ArrayList<>();
		JSONObject jsonList = null;
		int index = 0;
		for (BPerson b : personList) {
			jsonList = new JSONObject();

			jsonList.put("index", index++);
			jsonList.put("id", b.getPId());
			jsonList.put("name", b.getPName());

			List<JSONArray> jsonObject = (List<JSONArray>) attendanceList.get("jsonObject");
			List<String> jsonDate = (List<String>) attendanceList.get("jsonDate");
			Date max = null;
			Date min = null;
			String max_str = "";
			String min_str = "";
			for (JSONArray obj : jsonObject) {
				for (int i = 2; i < obj.size(); i = i + 2) {
					max = (Date) JSONObject.toBean((JSONObject) obj.get(i), Date.class);
					if (max == null) {
						max_str = "--";
					} else {
						max_str = sdf.format(max);
					}
					min = (Date) JSONObject.toBean((JSONObject) obj.get(i + 1), Date.class);
					if (min == null) {
						min_str = max_str;
					} else {
						min_str = sdf.format(min);
					}
					jsonList.put(jsonDate.get(i / 2 - 1), min_str + "<br/>" + max_str);
				}
			}
			list.add(jsonList);
		}

		PageBean pageBean = new PageBean();
		pageBean.setData(list);
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.setCycleDetectionStrategy(CycleDetectionStrategy.LENIENT);
		JSONObject returnObject = JSONObject.fromObject(pageBean, jsonConfig);
		returnObject = JsonCovert.filterNull(returnObject);
		return returnObject;
	}
}
/*
 * 
 * "attendanceList": { "jsonObject": [ [ "1", "测试", "", "", "", "", "", "", {
 * "date": 31, "day": 2, "hours": 22, "minutes": 52, "month": 2, "nanos": 0,
 * "seconds": 14, "time": 1585666334000, "timezoneOffset": -480, "year": 120 },
 * { "date": 31, "day": 2, "hours": 18, "minutes": 31, "month": 2, "nanos": 0,
 * "seconds": 23, "time": 1585650683000, "timezoneOffset": -480, "year": 120 },
 * { "date": 1, "day": 3, "hours": 9, "minutes": 5, "month": 3, "nanos": 0,
 * "seconds": 13, "time": 1585703113000, "timezoneOffset": -480, "year": 120 },
 * { "date": 1, "day": 3, "hours": 9, "minutes": 5, "month": 3, "nanos": 0,
 * "seconds": 13, "time": 1585703113000, "timezoneOffset": -480, "year": 120 },
 * { "date": 2, "day": 4, "hours": 18, "minutes": 6, "month": 3, "nanos": 0,
 * "seconds": 45, "time": 1585822005000, "timezoneOffset": -480, "year": 120 },
 * { "date": 2, "day": 4, "hours": 9, "minutes": 18, "month": 3, "nanos": 0,
 * "seconds": 36, "time": 1585790316000, "timezoneOffset": -480, "year": 120 },
 * "", "" ], [ "2", "张三", "", "", "", "", "", "", { "date": 31, "day": 2,
 * "hours": 21, "minutes": 42, "month": 2, "nanos": 0, "seconds": 41, "time":
 * 1585662161000, "timezoneOffset": -480, "year": 120 }, { "date": 31, "day": 2,
 * "hours": 21, "minutes": 18, "month": 2, "nanos": 0, "seconds": 43, "time":
 * 1585660723000, "timezoneOffset": -480, "year": 120 }, { "date": 1, "day": 3,
 * "hours": 11, "minutes": 0, "month": 3, "nanos": 0, "seconds": 21, "time":
 * 1585710021000, "timezoneOffset": -480, "year": 120 }, { "date": 1, "day": 3,
 * "hours": 11, "minutes": 0, "month": 3, "nanos": 0, "seconds": 21, "time":
 * 1585710021000, "timezoneOffset": -480, "year": 120 }, "", "", "", "" ] ],
 * "jsonDate": [ "2020-03-28", "2020-03-29", "2020-03-30", "2020-03-31",
 * "2020-04-01", "2020-04-02", "2020-04-03" ] }
 * 
 * 
 * 
 */
